# General properties
name = PlugIn.Test.JavaScript.TestProcedure
type = javascript
description = Checks the Java Procedure object wrapping vs. a standard JavaScript Function.

# Binding array
binding.0.name = code
binding.0.type = data
binding.0.value = function typeInfo(o) {\n\
\    let t = (o === null) ? 'null' : typeof(o);\n\
\    return [t, Object.prototype.toString.call(o)].join(' ');\n\
}\n\
\n\
function compareTypes(actual, expect, recursive) {\n\
\    let isNull = actual == null || expect == null;\n\
\    let isObject = typeof(actual) === 'object' || typeof(actual) === 'function';\n\
\    if (!isNull && isObject && recursive !== false) {\n\
\        let o = {};\n\
\        Object.getOwnPropertyNames(actual).forEach((k) => {\n\
\            o[k] = compareTypes(actual[k], expect[k], false);\n\
\        });\n\
\        Object.getOwnPropertyNames(expect).forEach((k) => {\n\
\            if (!(k in o)) {\n\
\                o[k] = ['\\uD83D\\uDFE1', compareTypes(actual[k], expect[k], false)].join(' ');\n\
\            }\n\
\        });\n\
\        return o;\n\
\    } else if ((isNull && actual !== expect) || typeof(actual) !== typeof(expect)) {\n\
\        return ['\\uD83D\\uDD34', typeInfo(actual), '!=', typeInfo(expect)].join(' ');\n\
\    } else {\n\
\        return typeInfo(actual);\n\
\    }\n\
}\n\
\n\
function compareValues(actual, expect, recursive) {\n\
\    let isNull = actual == null || expect == null;\n\
\    let isObject = typeof(actual) === 'object' || typeof(actual) === 'function';\n\
\    if (!isNull && isObject && recursive !== false) {\n\
\        let o = {};\n\
\        Object.getOwnPropertyNames(actual).forEach((k) => {\n\
\            o[k] = compareValues(actual[k], expect[k], false);\n\
\        });\n\
\        Object.getOwnPropertyNames(expect).forEach((k) => {\n\
\            if (!(k in o)) {\n\
\                o[k] = ['\\uD83D\\uDFE1', compareValues(actual[k], expect[k], false)].join(' ');\n\
\            }\n\
\        });\n\
\        return o;\n\
\    } else if (actual !== expect) {\n\
\        return ['\\uD83D\\uDD34', actual, '!=', expect].join(' ');\n\
\    } else {\n\
\        return actual;\n\
\    }\n\
}\n\
\n\
// Create ProcedureWrapper object\n\
let jsObj = (function () {\n\
\    return function systemStatus() {}; // Same name as bound procedure\n\
})();\n\
let javaObj = systemStatus;\n\
let addOn = { test: 123 };\n\
Object.assign(jsObj, addOn);\n\
Object.assign(javaObj, addOn);\n\
\n\
// Return meta information\n\
var res = {\n\
\    data: javaObj,\n\
\    props: compareValues(javaObj, jsObj),\n\
\    ownProperties: compareTypes(javaObj, jsObj),\n\
\    prototype: compareTypes(Object.getPrototypeOf(javaObj), Object.getPrototypeOf(jsObj))\n\
};\n\
return res;\n\

binding.1.name = systemStatus
binding.1.type = procedure
binding.1.value = System.Status
