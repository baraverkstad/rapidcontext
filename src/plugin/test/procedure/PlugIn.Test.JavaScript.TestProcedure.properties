# General properties
name = PlugIn.Test.JavaScript.TestProcedure
type = javascript
description = Checks the Java Procedure object wrapping vs. a standard JavaScript Function.

# Binding array
binding.0.name = code
binding.0.type = data
binding.0.value = // Create ProcedureWrapper object\n\
let jsObj = (function () {\n\
\    return function systemStatus() {}; // Same name as bound procedure\n\
})();\n\
let javaObj = systemStatus;\n\
let addOn = { test: 123 };\n\
Object.assign(jsObj, addOn);\n\
Object.assign(javaObj, addOn);\n\
\n\
// Return meta information\n\
var res = {\n\
\    type: metaType(javaObj),\n\
\    data: javaObj,\n\
\    properties: compareValues(javaObj, jsObj),\n\
\    ownProperties: compareTypes(javaObj, jsObj),\n\
\    prototypeProperties: compareTypes(Object.getPrototypeOf(javaObj), Object.getPrototypeOf(jsObj))\n\
};\n\
return res;
binding.1.name = systemStatus
binding.1.type = procedure
binding.1.value = system/status
binding.2.name = metaType
binding.2.type = procedure
binding.2.value = PlugIn.Test.JavaScript.Lib.MetaType
binding.3.name = compareTypes
binding.3.type = procedure
binding.3.value = PlugIn.Test.JavaScript.Lib.CompareTypes
binding.4.name = compareValues
binding.4.type = procedure
binding.4.value = PlugIn.Test.JavaScript.Lib.CompareValues
