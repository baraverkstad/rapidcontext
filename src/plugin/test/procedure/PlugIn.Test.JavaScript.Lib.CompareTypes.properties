# General properties
name = PlugIn.Test.JavaScript.Lib.CompareTypes
type = javascript
description = Compares types of two JavaScript values.

# Binding array
binding.0.name = code
binding.0.type = data
binding.0.value = function compareTypes(actual, expect, recursive) {\n\
\    let isNull = actual == null || expect == null;\n\
\    let isObject = typeof(actual) === 'object' || typeof(actual) === 'function';\n\
\    if (!isNull && isObject && recursive !== false) {\n\
\        let o = {};\n\
\        Object.getOwnPropertyNames(actual).forEach((k) => {\n\
\            o[k] = compareTypes(actual[k], expect[k], false);\n\
\        });\n\
\        Object.getOwnPropertyNames(expect).forEach((k) => {\n\
\            if (!(k in o)) {\n\
\                o[k] = ['\\uD83D\\uDFE1', compareTypes(actual[k], expect[k], false)].join(' ');\n\
\            }\n\
\        });\n\
\        return o;\n\
\    } else if ((isNull && actual !== expect) || typeof(actual) !== typeof(expect)) {\n\
\        return ['\\uD83D\\uDD34', typeName(actual), '!=', typeName(expect)].join(' ');\n\
\    } else {\n\
\        return typeName(actual);\n\
\    }\n\
}\n\
\n\
return compareTypes(actual, expect, true);
binding.1.name = typeName
binding.1.type = procedure
binding.1.value = PlugIn.Test.JavaScript.Lib.TypeName
binding.2.name = actual
binding.2.type = argument
binding.2.description = The actual value
binding.3.name = expect
binding.3.type = argument
binding.3.description = The expected value
