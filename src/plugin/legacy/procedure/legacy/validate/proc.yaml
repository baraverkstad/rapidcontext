id: legacy/validate/proc
type: procedure/javascript
description: |-
    Performs a basic validation for all procedures:

    - Checks for references to missing connections
    - Checks for references to missing procedures
    - Checks for references to procedure aliases
binding:
  - name: code
    type: data
    value: |-
        var CONNECTIONS = {};
        var NAMES = {};
        var MSGS = {};

        function read(name) {
            let src = readProc(name);
            NAMES[src.id] = src.id;
            if (src.alias && !NAMES[src.alias]) {
                NAMES[src.alias] = src.id;
            }
            return (!prefix || src.id.startsWith(prefix)) ? src : null;
        }

        function check(src) {
            src.bindings.forEach(function (b) {
                if (b.type === 'connection') {
                    if (b.value && !CONNECTIONS[b.value]) {
                        error(src.id, 'not found: connection/' + b.value);
                    }
                } else if (b.type === 'procedure') {
                    if (!NAMES[b.value]) {
                        error(src.id, 'not found: procedure/' + b.value);
                    } else if (NAMES[b.value] !== NAMES[b.value]) {
                        warning(src.id, 'renamed: procedure/' + b.value +
                                ' --> procedure/' + NAMES[b.value]);
                    }
                } else if (b.type === 'data' && b.name === 'code') {
                    if (!b.value.includes('return ')) {
                        warning(src.id, 'possibly missing return statement');
                    }
                }
            });
        }

        function error(id, msg) {
            MSGS[id] = MSGS[id] || [];
            MSGS[id].push('\ud83d\uded1 ' + msg);
        }

        function warning(id, msg) {
            MSGS[id] = MSGS[id] || [];
            MSGS[id].push('\u26a0\ufe0f ' + msg);
        }

        let env = systemStatus().environment;
        env = env && storageRead('/environment/' + env.name).connections;
        storageRead('/connection/').forEach(function (cxn) {
            let id = cxn.id.substring((env || '').length);
            CONNECTIONS[id] = cxn.id;
        });
        listProc().map(read).filter(Boolean).forEach(check);
        return MSGS;
  - name: systemStatus
    type: procedure
    value: system/status
  - name: storageRead
    type: procedure
    value: system/storage/read
  - name: listProc
    type: procedure
    value: system/procedure/list
  - name: readProc
    type: procedure
    value: system/procedure/read
  - name: prefix
    type: argument
    description: The procedure name prefix (or blank)
