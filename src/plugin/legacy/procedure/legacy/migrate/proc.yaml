id: legacy/migrate/proc
type: procedure/javascript
description: Stores draft migrated versions of legacy procedures.
binding:
  - name: code
    type: data
    value: |
        var TYPES = {
            'built-in': 'procedure',
            'javascript': 'procedure/javascript',
            'cmdline.exec': 'procedure/cmdline/exec',
            'http.request': 'procedure/http/request',
            'jdbc.query': 'procedure/jdbc/query',
            'jdbc.statement': 'procedure/jdbc/statement'
        };

        var NAMES = {};

        function rename(name) {
            function toLower(s) {
                return (s == s.toUpperCase()) ? s : s.toLowerCase();
            }
            name = name.replace(/\./g, '/');
            name = name.replace(/([a-z0-9])([A-Z])/g, '$1-$2');
            return name.split('/').map(toLower).join('/');
            return name.toLowerCase();
        }

        function read(name) {
            let src = readProc(name);
            if (name.startsWith(prefix)) {
                NAMES[name] = rename(name);
                return src;
            } else if (src.alias) {
                NAMES[src.alias] = src.id;
                return null;
            } else {
                return null;
            }
        }

        function convert(src) {
            let data = {
                id: NAMES[src.name] || src.name,
                type: TYPES[src.type] || src.type,
                alias: src.name
            };
            if (data.type === 'procedure') {
                data.className = [
                    'org.rapidcontext.app.proc.',
                    src.name.replace(/\./g, '').replace('System', ''),
                    'Procedure'
                ].join('');
            };
            let proc = Object.assign({}, data, src, data);
            proc.binding = proc.bindings;
            delete proc.name;
            delete proc.local;
            delete proc.bindings;
            (proc.binding || []).forEach(function (b) {
                if (b.type === 'argument') {
                    delete b.value;
                } else if (b.type === 'procedure') {
                    b.value = NAMES[b.value] || b.value;
                    delete b.description;
                } else if (b.type === 'data' && b.name === 'code') {
                    b.value = b.value.trim() + '\n';
                    delete b.description;
                } else {
                    delete b.description;
                }
            });
            return proc;
        }

        function store(data) {
            let path = '/procedure/' + data.id;
            storageWrite(path, data, 'yaml');
            return path;
        }

        let procs = listProc().map(read).filter(Boolean);
        return procs.map(convert).map(store);
  - name: listProc
    type: procedure
    value: system/procedure/list
  - name: readProc
    type: procedure
    value: system/procedure/read
  - name: storageWrite
    type: procedure
    value: system/storage/write
  - name: prefix
    type: argument
    description: The procedure name prefix
