# The configured list of log handlers. A log handler roughly
# corresponds to a log output, typically a file or the console. The
# handlers are configured by appending the configuration properties
# to the handler name. Any property ending with "handler" is assumed
# to define a log handler. The available configuration properties
# are:
#
#   handler - The fully qualified name of the log handler class.
#       Often the default JDK log handler classes are used.
#   level - [optional] The minimum log level. The available log
#       levels are: ERROR, WARNING, INFO, and TRACE. The special
#       values ALL and OFF are also available. Defaults to ALL.
#   formatter - [optional] The formatter class name. Default depends
#       on the handler class.
#   encoding - [optional] The name of the character set encoding to
#       use. Defaults to platform encoding.
#   filter - [optional] The filter class name. Defaults to none.
#   target - [MemoryHandler] The target handler name.
#   size - [MemoryHandler, optional] The memory buffer size.
#       Defaults to 1000.
#   push - [MemoryHandler, optional] The trigger or push level for
#       when the handler will dump its log entries to the target
#       handler. Defaults to ERROR.
#   pattern - [FileHandler, optional] The output file name pattern.
#       Defaults to "%h/java%u.log". See FileHandler for formatting
#       details.
#   append - [FileHandler, optional] The append to existing files
#       flag. Defalts to false.
#   limit - [FileHandler, optional] The approximate maximum file
#       (before log rotation). Defaults to zero, which means
#       unlimited.
#   count - [FileHandler, optional] The number of output files to
#       cycle through. Defaults to 1.

# Console log handler
console.handler = java.util.logging.ConsoleHandler
console.level = WARNING
console.formatter = java.util.logging.SimpleFormatter

# Security log handler
security.handler = java.util.logging.FileHandler
security.level = INFO
security.formatter = java.util.logging.SimpleFormatter
security.pattern = security.%g.log
security.limit = 1000000
security.count = 9

# Debug log handler
debug.handler = java.util.logging.MemoryHandler
debug.level = ALL
debug.target = debugfile
debug.size = 100
debug.push = ERROR

# Debug file handler, not to be used directly
debugfile.handler = java.util.logging.FileHandler
debugfile.level = ALL
debugfile.formatter = java.util.logging.SimpleFormatter
debugfile.pattern = debug.%g.log
debugfile.limit = 100000
debugfile.count = 9


# The configured loggers with levels and handlers to use. Loggers
# are normally created automatically as needed using the fully
# qualified name of the logging class. Loggers are created into a
# hierarchical structure using the dots ('.') in the logger names
# to separate parent and child loggers. Unless configured here, each
# logger will use the parent logger level and handlers. If a logger
# is explicitly created here, only level and handlers specified will
# be used.
#
# The loggers are configured by appending one of the configuration
# properties to the logger name. Any property ending with these
# configuration names is assumed to define a logger. The available
# configuration properties are:
#
#   level - [optional] The minimum log level. The available log
#       levels are: ERROR, WARNING, INFO, and TRACE. The special
#       values ALL and OFF are also available.
#   handlers - [optional] The list of log handler names. Separated by
#       spaces. Each hander name listed here must be defined in the
#       handlers section above.
#
# The special properties ".level" and ".handlers" define the
# configuration for the root logger in the hierarchy.

org.rapidcontext.handlers = console debug
org.rapidcontext.level = ALL
org.rapidcontext.app.auth.handlers = console debug security
org.rapidcontext.app.auth.level = ALL
org.rapidcontext.core.security.handlers = console debug security
org.rapidcontext.core.security.level = ALL
