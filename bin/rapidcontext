#!/bin/bash
#
# Start script for command-line RapidContext handling.
#
# See accompanying "share/init" scripts for running as a service.
# This script locates the Java environment and launches the app.
#

# Change to base application directory
PROGRAM="$0"
SYMLINK="$PROGRAM"
while [ "$SYMLINK" != "" ] ; do
    cd `dirname $SYMLINK`
    PROGRAM=`pwd -P`/`basename $SYMLINK`
    SYMLINK=`readlink $PROGRAM`
done
cd ..

# Verifies that a directory can serve as JAVA_HOME
function is_java_dir {
    DIR=$1
    if [[ ! -x "$DIR/bin/java" ]] ; then
        return 1
    fi
    if [[ (! -d "$DIR/jre") && (! -d "$DIR/lib") ]] ; then
        return 2
    fi
    return 0
}

# Locate JAVA executable
if is_java_dir $JAVA_HOME ; then
    JAVA=$JAVA_HOME/bin/java
elif [[ `which java` != "" ]] ; then
    JAVA=`which java`
elif [[ -x /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home/bin/java ]] ; then
    JAVA=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home/bin/java
else
    JAVA_HOME=
    for JAVA_EXE in `locate bin/java | grep java$ | xargs echo` ; do
        JAVA_HOME=`dirname "$JAVA_EXE"`
        JAVA_HOME=`dirname "$JAVA_HOME"`
        if is_java_dir $JAVA_HOME ; then
            break
        else
            JAVA_HOME=
        fi
    done
    if [[ "$JAVA_HOME" == "" ]] ; then
        echo "ERROR: Failed to find java 21 or higher." >&2
        exit 1
    fi
    JAVA=$JAVA_HOME/bin/java
fi

# Check for PIDFILE or LOGFILE variables
if [ "$PIDFILE" != "" ] ; then
    echo $$ > $PIDFILE
fi
if [ "$LOGFILE" != "" ] ; then
    exec >>$LOGFILE 2>&1
fi

# Setup JAVA_TOOL_OPTIONS variable
LOGGING="lib/logging.properties"
if [[ "$JAVA_TOOL_OPTIONS" == *DEBUG* ]] ; then
    LOGGING="lib/debug.properties"
fi
JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Djava.util.logging.config.file=$LOGGING"
JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Dorg.eclipse.jetty.server.Request.maxFormContentSize=1000000"
export JAVA_TOOL_OPTIONS

# Launch application
exec "$JAVA" -jar lib/rapidcontext-*.jar "$@"
